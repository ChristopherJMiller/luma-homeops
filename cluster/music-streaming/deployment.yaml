apiVersion: apps/v1
kind: Deployment
metadata:
  name: gonic
  namespace: music-streaming
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: gonic
  template:
    metadata:
      labels:
        app: gonic
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
    spec:
      initContainers:
        - name: init-playlists
          image: busybox:1@sha256:e3652a00a2fabd16ce889f0aa32c38eec347b997e73bd09e69c962ec7f8732ee
          command: ["sh", "-c", "mkdir -p /playlists/data"]
          volumeMounts:
            - name: playlists-storage
              mountPath: /playlists
        - name: init-music
          image: busybox:1@sha256:e3652a00a2fabd16ce889f0aa32c38eec347b997e73bd09e69c962ec7f8732ee
          command: ["sh", "-c", "mkdir -p /music/data"]
          volumeMounts:
            - name: music-storage
              mountPath: /music
      containers:
        - name: gonic
          image: ghcr.io/sentriz/gonic:v0.19.0@sha256:31e0df9b600ad4b49ea7cd4be198abe5fed33c11e00fbc368c3d2c2a8cde1fde
          ports:
            - containerPort: 80
              name: http
          env:
            - name: GONIC_MUSIC_PATH
              value: "/music/data"
            - name: GONIC_CACHE_PATH
              value: "/cache"
            - name: GONIC_DB_PATH
              value: "/data/gonic.db"
            - name: GONIC_SCAN_INTERVAL
              value: "1440"
            - name: GONIC_SCAN_AT_START_ENABLED
              value: "false"
            - name: GONIC_SCAN_WATCHER_ENABLED
              value: "true"
            - name: GONIC_PLAYLISTS_PATH
              value: "/playlists/data"
          volumeMounts:
            - name: music-storage
              mountPath: /music
              readOnly: true
            - name: cache-storage
              mountPath: /cache
            - name: data-storage
              mountPath: /data
            - name: playlists-storage
              mountPath: /playlists
          resources:
            requests:
              memory: 2Gi
              cpu: 1
            limits:
              memory: 2Gi
          livenessProbe:
            httpGet:
              path: /rest/ping
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /rest/ping
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
        - name: webdav
          image: ghcr.io/christopherjmiller/docker-webdav:master-5831339@sha256:4ad95544cffffa771bd5cc1b046c18e61bffa93eefcb72e66d45f997bcec2124
          ports:
            - containerPort: 8080
              name: webdav
          env:
            - name: USERNAME
              value: "media"
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: webdav-music-pass
                  key: password
            - name: UID
              value: "1000"
            - name: GID
              value: "1000"
          volumeMounts:
            - name: music-storage
              mountPath: /media
              subPath: data
      volumes:
        - name: music-storage
          persistentVolumeClaim:
            claimName: gonic-music-pvc
        - name: cache-storage
          persistentVolumeClaim:
            claimName: gonic-cache-pvc
        - name: data-storage
          persistentVolumeClaim:
            claimName: gonic-data-pvc
        - name: playlists-storage
          persistentVolumeClaim:
            claimName: gonic-playlists-pvc
